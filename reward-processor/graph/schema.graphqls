type Query {
  rules: [Rule!]!
  rule(id: ID!): Rule
}

type Mutation {
  createRule(input: CreateRuleInput!): Rule!
  updateRule(id: ID!, input: UpdateRuleInput!): Rule!
}

type Rule {
  id: ID!
  eventType: String!
  count: Int
  conditions: RuleConditions
  reward: Reward!
  enabled: Boolean!
}

type RuleConditions {
  category: String
}

enum RewardType {
  BADGE
  POINTS
}

type Reward {
  type: RewardType!
  amount: Int
  description: String!
}

input CreateRuleInput {
  eventType: String!
  count: Int
  conditions: RuleConditionsInput
  reward: RewardInput!
  enabled: Boolean!
}

input UpdateRuleInput {
  eventType: String
  count: Int
  conditions: RuleConditionsInput
  reward: RewardInput
  enabled: Boolean
}

input RewardInput {
  type: RewardType!
  amount: Int
  description: String!
}

input RuleConditionsInput {
  category: String!
}

scalar JSON

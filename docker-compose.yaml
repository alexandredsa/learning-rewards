services:
  catalog-api:
    build:
      context: ./catalog-api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DATABASE_DSN=postgres://user:pass@postgres:5432/catalog-api?sslmode=disable
      - PORT=8080
      - ENV=dev
    depends_on:
      postgres:
        condition: service_healthy

  event-processor:
    build:
      context: ./event-processor
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=learning-events
    depends_on:
      kafka:
        condition: service_healthy

  reward-processor-api:
    build:
      context: ./reward-processor
      dockerfile: Dockerfile
      args:
        SERVICE: api
    ports:
      - "8082:8082"
    environment:
      - DATABASE_DSN=postgres://user:pass@postgres:5432/rewards?sslmode=disable
      - PORT=8082
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy

  reward-processor-worker:
    build:
      context: ./reward-processor
      dockerfile: Dockerfile
      args:
        SERVICE: worker
    ports:
      - "8083:8083"
    environment:
      - DATABASE_DSN=postgres://user:pass@postgres:5432/rewards?sslmode=disable
      - PORT=8083
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CONSUMER_TOPICS=learning-events
      - KAFKA_CONSUMER_GROUP=reward-processor
      - LOG_LEVEL=debug
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    entrypoint: >
      bash -c '
        docker-entrypoint.sh postgres &
        until pg_isready -U user; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 1
        done;
        psql -v ON_ERROR_STOP=1 --username "$$POSTGRES_USER" --dbname "postgres" -c "CREATE DATABASE catalog-api;"
        psql -v ON_ERROR_STOP=1 --username "$$POSTGRES_USER" --dbname "postgres" -c "CREATE DATABASE rewards;"
        psql -v ON_ERROR_STOP=1 --username "$$POSTGRES_USER" --dbname "postgres" -c "GRANT ALL PRIVILEGES ON DATABASE \"catalog-api\" TO \"$$POSTGRES_USER\";"
        psql -v ON_ERROR_STOP=1 --username "$$POSTGRES_USER" --dbname "postgres" -c "GRANT ALL PRIVILEGES ON DATABASE \"rewards\" TO \"$$POSTGRES_USER\";"
        wait
      '
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user && psql -U user -d catalog-api -c '\\q' && psql -U user -d rewards -c '\\q'"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
      - "29092:29092"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_DELETE_TOPIC_ENABLE: "true"
      KAFKA_CFG_LOG_RETENTION_HOURS: 168
      KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9094:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  postgres:
